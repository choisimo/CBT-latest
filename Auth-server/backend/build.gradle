plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.4'
    id 'io.spring.dependency-management' version '1.1.4'
    // Lombok automatic configuration via FreeFair plugin
    id 'io.freefair.lombok' version '8.6'
}

// Configure Lombok version for the FreeFair plugin to ensure JDK 21 compatibility
lombok {
    version.set("1.18.32")
}

group = 'com.authentication'
version = '0.0.1-SNAPSHOT'

def queryDslVersion = '6.1'
def lombokVersion = '1.18.32'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

dependencies {
    // Spring Boot Starters
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client:3.3.0'
    implementation 'org.springframework.boot:spring-boot-starter-data-elasticsearch'
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'

    // Database
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'

    // Lombok (compileOnly + annotationProcessor)
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    // QueryDSL (OpenFeign 포크 버전으로 수정)
    implementation "io.github.openfeign.querydsl:querydsl-jpa:${queryDslVersion}"
    annotationProcessor "io.github.openfeign.querydsl:querydsl-apt:${queryDslVersion}:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    // JWT
    compileOnly 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    // Utils
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'commons-io:commons-io:2.15.1'
    implementation 'org.apache.commons:commons-text:1.10.0'

    // Email
    implementation 'org.springframework:spring-context-support'
    implementation 'com.sun.mail:jakarta.mail:2.0.1'

    // Swagger (Springdoc)
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'

    // Jasypt
    implementation 'com.github.ulisesbocchio:jasypt-spring-boot-starter:3.0.5'

    // Socket.IO
    implementation 'com.corundumstudio.socketio:netty-socketio:2.0.3'

    // Test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'com.github.jsqlparser:jsqlparser:5.0'
}

// 컴파일 시 QueryDSL 생성 소스 출력 디렉토리 설정
tasks.named('compileJava', JavaCompile) {
    doFirst {
        println '--- compileJava compiler args: ---'
        options.getCompilerArgs().each { println it }
        println 'annotationProcessorPath: ' + options.getAnnotationProcessorPath()?.asPath
    }

    options.getGeneratedSourceOutputDirectory().set(file("$buildDir/generated/sources/annotationProcessor/java/main"))
    options.compilerArgs += [
        "-Aquerydsl.generatedAnnotationClass=jakarta.annotation.Generated",
        "-Aquerydsl.entityAccessors=MIXED"
    ]
}

tasks.named('test') {
    useJUnitPlatform()
}

tasks.named('clean', Delete) {
    delete buildDir
}

def querydslDir = "$buildDir/generated/querydsl"
// QueryDSL 생성 소스를 메인 소스셋에 추가
sourceSets {
    main {
        java {
            srcDirs += "$buildDir/generated/sources/annotationProcessor/java/main"
        }
    }
}

tasks.named('compileTestJava', JavaCompile) {
    options.compilerArgs += ["-Xlint:all", "-verbose"]

    doFirst {
        println "--- compileTestJava Compiler Arguments ---"
        options.getCompilerArgs().each { arg -> println arg }
        println "--- compileTestJava Classpath ---"
        println classpath.asPath
        println "--------------------------------------"
    }

    doLast {
        def compileTaskClasspathFile = new File(buildDir, "compileTestJavaClasspath.txt")
        compileTaskClasspathFile.write(classpath.asPath)
        println "compileTestJava task's actual classpath written to: " + compileTaskClasspathFile.absolutePath
    }
}

task printTestClasspath {
    doLast {
        def classpathFile = new File(buildDir, "testClasspath.txt")
        classpathFile.write(sourceSets.test.compileClasspath.asPath)
        println "Test classpath has been written to: " + classpathFile.absolutePath
    }
}
