plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.4'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'io.freefair.lombok' version '8.6'
}

// Lombok 버전을 명시적으로 설정 (JDK 21 호환성 보장)
lombok {
    version.set("1.18.32")
}

group = 'com.authentication'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    // Exclude Spring Boot's default logger (Logback) to use Log4j2 instead
    all {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }
}

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

def queryDslVersion = "5.0.0"

dependencies {
    // Logging - Use Log4j2 instead of the default Logback
    implementation 'org.springframework.boot:spring-boot-starter-log4j2'

    // Spring Boot Starters
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-data-elasticsearch'
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.mariadb.jdbc:mariadb-java-client:3.3.3'

    // Database
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
    testImplementation 'com.h2database:h2:2.1.214'

    // QueryDSL
    implementation "com.querydsl:querydsl-jpa:${queryDslVersion}:jakarta"
    annotationProcessor "com.querydsl:querydsl-apt:${queryDslVersion}:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    // JWT
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    // Utils
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'commons-io:commons-io:2.15.1'
    implementation 'org.apache.commons:commons-text:1.10.0'

    // Email
    implementation 'org.springframework:spring-context-support'
    implementation 'com.sun.mail:jakarta.mail:2.0.1'

    // Swagger (Springdoc)
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'

    // Jasypt
    implementation 'com.github.ulisesbocchio:jasypt-spring-boot-starter:3.0.5'

    // Socket.IO
    implementation 'com.corundumstudio.socketio:netty-socketio:2.0.3'

    // Resilience4j (CircuitBreaker & TimeLimiter)
    implementation 'io.github.resilience4j:resilience4j-spring-boot3:2.2.0'
    implementation 'io.github.resilience4j:resilience4j-reactor:2.2.0'

    // Test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'com.github.jsqlparser:jsqlparser:5.0'
    testImplementation 'io.projectreactor:reactor-test'
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java', 'src/main/generated']
        }
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

bootJar {
    mainClass = 'com.authentication.auth.AuthApplication'
    archiveFileName = 'auth-0.0.1-SNAPSHOT.jar'
    destinationDirectory = file('build/libs')
}
